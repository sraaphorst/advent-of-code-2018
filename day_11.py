#!/usr/bin/env python3
# day_11.py
# By Sebastian Raaphorst, 2018.


import aocd


def calculate_cell_power_level(x, y, serial):
    """
    Calculate the convoluted power level of a cell.
    :param x: the x coordinate
    :param y: the y coordinate
    :param serial: the serial number of the device
    :return: the power level

    >>> calculate_cell_power_level(3, 5, 8)
    4
    >>> calculate_cell_power_level(122, 79, 57)
    -5
    >>> calculate_cell_power_level(217, 196, 39)
    0
    >>> calculate_cell_power_level(101, 153, 71)
    4
    """
    rack_id = x + 10
    return int(('000' + str((rack_id * y + serial) * rack_id))[-3]) - 5


def create_power_level_matrix(serial):
    """
    Create the 300 x 300 power level matrix that is generated by serial.
    :param serial: program input
    :return: A 300 x 300 array of power levels
    """
    return [[calculate_cell_power_level(x, y, serial) for y in range(300)] for x in range(300)]


def create_summed_area_table(powers):
    """
    Create a summed-area table, which allows rapid computation of any rectangular sum.
    Wikipedia details it here:
    https://en.wikipedia.org/wiki/Summed-area_table
    :param powers: the table of powers
    :return: the summed area table

    >>> SA = create_summed_area_table(create_power_level_matrix(1))
    >>> len(SA)
    300
    >>> len(SA[0])
    300
    >>> print(create_power_level_matrix(1))
    >>> print('{}\\n{}'.format(create_power_level_matrix((1), SA))
    123
    """
    table = [[0] * 300 for _ in range(300)]
    table[0][0] = powers[0][0]

    # In order to not have to deal with avoiding negative values, calculate the first row and column explicitly.
    for i in range(1, 300):
        table[i][0] = powers[i][0] + table[i-1][0]
        table[0][i] = powers[0][i] + table[0][i-1]

    # Now the rest is trivially easy. Proceed over columns and then rows.
    for row in range(2, 300):
        for col in range(2, 300):
            table[row][col] = powers[row][col] + table[row][col-1] + table[row-1][col] - table[row-1][col-1]

    return table


def calculate_square_power_level(table, x, y, n=3):
    """
    Given the upper left coordinate of a 3x3 square, find its total power level using the summed-area table.
    :param table: the summed-area table
    :param x: the x coordinate
    :param y: the y coordinate
    :param n: the dimensions of the square
    :return: the sum of the power of the 3x3 square

    >>> powers = create_summed_area_table(create_power_level_matrix(18))
    >>> calculate_square_power_level(powers, 33, 45)
    29
    """
    return table[x][y] + table[x+n][y+n] - table[x+n][y] - table[x][y+n]


def find_highest_powered_square(table, n=3):
    """
    Given a serial number, find the n x n square with the highest power level.
    :param table: the summed-area table
    :param n: the dimensions of the square
    :return: the upper left coordinates of the n x n square with maximum power

    >>> find_highest_powered_square(create_summed_area_table(create_power_level_matrix(18)))
    (29, (33, 45))
    >>> find_highest_powered_square(create_summed_area_table(create_power_level_matrix(42)))
    (30, (21, 61))
    """
    return max([(calculate_square_power_level(table, x, y, n), (x, y))
                for x in range(300 - n + 1) for y in range(300 - n + 1)])


# def find_highest_powered_of_all_squares(table):
#     """
#     Find the highest power level of all squares.
#     :param table: the summed-area table
#     :return: the upper left coordinates and size of each cell
#     >>> find_highest_powered_of_all_squares(create_summed_area_table(create_power_level_matrix(18)))
#     ((113, (90, 269)), 16)
#     """
#     return max([(find_highest_powered_square(table, i), i) for i in range(1, 301)])



if __name__ == '__main__':
    day = 11
    session = aocd.get_cookie()
    data = aocd.get_data(session=session, year=2018, day=day)
    serial_data = int(data)

    A = create_power_level_matrix(10)
    for i in range(10):
        C = A[:10]
        print(C)
    print('\n\n')
    B = create_summed_area_table(A)
    for i in range(10):
        print(B[:10])

    #a1 = '{},{}'.format(*find_highest_powered_square(cell_powers)[1])
    #print('a1 = {}'.format(a1))
    #aocd.submit1(a1, year=2018, day=day, session=session, reopen=False)

    #a2 = None
    #print('a2 = %r' % a2)
    #aocd.submit2(a2, year=2018, day=day, session=session, reopen=False)
