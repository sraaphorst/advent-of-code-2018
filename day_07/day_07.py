#!/usr/bin/env python3
# day_07.py
# By Sebastian Raaphorst, 2018.


import aocd
import re


def extract_step_data(step_text):
    return [(line[36], line[5]) for line in step_text.split('\n')]


def create_step_dict(step_data):
    """
    Calculate a dictionary, indexed by step, to lists of its precursor steps.
    :param step_data: the step data as parsed by extract_step_data
    :return: a dictionary with steps as keys and a list of requirements

    >>> create_step_dict([('A', 'C'), ('F', 'C'), ('B', 'A'), ('D', 'A'), ('E', 'B'), ('E', 'D'), ('E', 'F')])
    {'A': ['C'], 'F': ['C'], 'B': ['A'], 'D': ['A'], 'E': ['B', 'D', 'F']}
    """
    step_dict = {}
    for step, requirement in step_data:
        step_dict.setdefault(step, [])
        step_dict[step].append(requirement)
    return step_dict


def step_order(step_dict):
    """
    Given data about what steps can be done in what order, determine the order (alphabetical breaks ties) in which
    steps must be done.
    :param step_data: the step data as generated by create_step_dict
    :return: the order in which to do the steps, as a string

    >>> step_order({'A': ['C'], 'F': ['C'], 'B': ['A'], 'D': ['A'], 'E': ['B', 'D', 'F']})
    'CABDFE'
    """
    step_dictp = step_dict.copy()

    # Get the set of all steps.
    steps = set()
    for values in step_dictp.values():
        steps.update(values)
    for keys in step_dictp.keys():
        steps.update(keys)

    # While there are steps left, determine what will be done.
    step_order = []
    while len(steps) > 0:
        # Symmetric difference between the keys and the steps are what can be done.
        candidates = sorted(list(steps.difference(step_dictp.keys())))
        next_step = candidates.pop(0)
        steps.remove(next_step)
        step_order.append(next_step)
        if next_step in step_dictp.keys():
            del step_dictp[next_step]

        keys = list(step_dictp.keys())
        for k in keys:
            if next_step in step_dictp[k]:
                step_dictp[k].remove(next_step)
                if len(step_dictp[k]) == 0:
                    del step_dictp[k]

    return ''.join(step_order)


if __name__ == '__main__':
    day = 7
    session = aocd.get_cookie()
    data = aocd.get_data(session=session, year=2018, day=day)
    step_dict = create_step_dict(extract_step_data(data))

    a1 = step_order(step_dict)
    print("a1 = %r" % a1)
    #aocd.submit1(a1, year=2018, day=day, session=session, reopen=False)

    a2 = None
    print("a2 = %r" % a2)
    #aocd.submit2(a2, year=2018, day=day, session=session, reopen=False)
